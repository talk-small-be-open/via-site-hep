//
// Styles for hep tocca
//
// Namespace: "t-" = short for "Tocca-"
// Caveat! The term "Module" is used in the via software as the container for tasks, but
// is also used as a group name for two units of the Tocca-Book

// =======================================================================
// Fonts
// =======================================================================

// Font "zeitung" is included via online Adobe CSS

// @font-face {
//   font-family: zeitung;
//   src: url(fonts/NunitoSans-Regular.ttf);
// 	font-weight: normal; // 400
// }

// =======================================================================
// Importing
// =======================================================================

// Import main styles
@import "../../base/web_root/css/styles.less";

// Our SITE own uikit theme (overrides to the via base uikit theme)
@import "uikit_theme/_import.less";

// =======================================================================
// Variables
// =======================================================================


@t-color-black: #333;
@t-color-blue: #117CBE;
@t-color-red: #CE5C5B;
@t-color-unit1: #ca4947;
@t-color-unit2: #f08c2d;
@t-color-unit3: #8aa95b;
@t-color-tandem-question: #CDE5F2;


@wrongColor: inherited;
@correctColor: #efe;


@t-header-height:             3rem;
@t-header-height-small:       5vh;
@t-header-background:         @t-color-black;
@t-header-small-background:   @t-color-black;
@t-header-shadow-sticky:      0 0 50px 1px rgba(0,0,0,0.2);
@t-header-shadow-teaser:      0 0 150px 1px rgba(0,0,0,0.5);
@t-header-padding:            1rem;



// Redefine basics for this via sub-website
@via-basic-color: @t-color-black;
@via-basic-background-color: @t-color-red;
// @via-coloredbutton-color: #555;
// @via-coloredbutton-hover-color: darken(@via-coloredbutton-color, 10%);


// =======================================================================
// DEVELOPMENT ONLY
// =======================================================================



// =======================================================================
// UI Breakpoints
// =======================================================================
// {{{


// Small and bigger
@media (min-width: @breakpoint-small) {

		div.coreContainer {
				padding-left: 2em;
				padding-right: 2em;
		}
		
}

// Not small phones
@media (min-width: @breakpoint-small-max) {
		body.loggedIn {
				div.core {
						min-height: 500px;
				}
		}
}

// Only very small phones
@media (max-width: @breakpoint-small) {
		div.coreContainer {
				padding-left: 0;
				padding-right: 0;
		}

}

// }}}

// =======================================================================
// Mixins
// =======================================================================
// {{{

// Tocca big button
.bigButton {
		text-transform: uppercase;
		text-align: center;
		display: flex;
		flex-direction: column;
		justify-content: center;
		padding: auto;
		height: 3em;
		//		padding: 2em;
//		margin: 0.1em;
		cursor: pointer;
		font-size: 200%;
		//		background-color: transparent;
		border: 2px solid @global-color;
}

// Siehe auch button.less im ui kit theme
.button {
		text-transform: uppercase;
		//		display: inline-block;
		padding: 1em;
		margin: 0.1em;
		cursor: pointer;
		//		background-color: transparent;

		border: 2px solid @global-color;

}

.catalogListItem(@borderColor) {
		border-top-width: 2px;
		border-top-style: solid;
		border-top-color: @borderColor;
		padding: 1em 0;
		margin: 0;
		cursor: pointer;
}

// Use this on html elements which are decorated with a "toccamoduleX" css class, to set
// the background color to the unit's main color
// Example: .toccamoduleBackgroundColor("div.control span.button")
.toccamoduleBackgroundColor(@selector){
		@s: e(@selector); // converting the incoming string as a literal (strange less behaviour)
		&.toccamodule1 {@{s} {background-color: @t-color-unit1;}}
		&.toccamodule2 {@{s} {background-color: @t-color-unit2;}}
		&.toccamodule3 {@{s} {background-color: @t-color-unit3;}}
}

// Use this on html elements which are decorated with a "toccamoduleX" css class, to set
// the border color to the unit's main color
// Example: .toccamoduleBorderColor("div.control span.button")
.toccamoduleBorderColor(@selector){
		@s: e(@selector); // converting the incoming string as a literal (strange less behaviour)
		&.toccamodule1 {@{s} {border-color: @t-color-unit1;}}
		&.toccamodule2 {@{s} {border-color: @t-color-unit2;}}
		&.toccamodule3 {@{s} {border-color: @t-color-unit3;}}
}

.toccamoduleButton(@selector){
		@s: e(@selector); // converting the incoming string as a literal (strange less behaviour)

		.style(@localColor) {
				border-color: @localColor;
				color: @localColor;
				background-color: white;

				&:hover, &:active {
						background-color: @localColor;
						color: white;
				}

		}
		
		&.toccamodule1 {@{s} {.style(@t-color-unit1)}}
		&.toccamodule2 {@{s} {.style(@t-color-unit2)}}
		&.toccamodule3 {@{s} {.style(@t-color-unit3)}}
}

.noUserSelect() {
		
		user-select: none;
		-webkit-user-select: none;
		-moz-user-select: none;
		-ms-user-select: none;
		cursor: default;
}

.noTouch() {
		touch-action: none;
}

.draggable() {
		.noUserSelect();
		.noTouch();
		cursor: move;
}

.dropHover() {
		&.dropHover {
				background-color: @dropTargetHoverColor;
		}
}



// }}}

// =======================================================================
// General Styles
// =======================================================================
// {{{

// Styles for the non-logged in public UI
body.public {
		background-color: @t-color-red;
		div.coreContainer {
				padding-top: 2em;
				background-color: @t-color-red;
		}

		h1, h2, h3 {
				color: white;
		}

		input.submit, button, a.uk-button {
				color: white;
				border-color: white;
		}

		a {
				color: black;

				&:hover {
						color: black;
				}
		}
}

// General button styling
input.submit, button, a.uk-button {
		.button();
}

// All buttons get the color of the tocca unit, if inside a div with tocca module number
div {
		.toccamoduleButton("input.submit");
		.toccamoduleButton("button");
		.toccamoduleButton(".bigButton");
		.toccamoduleButton("a.uk-button");
}


//
// header 
//
div.t-header {
    
		background-color: @t-header-background;
		padding: @t-header-padding;

		a.t-logo {
				font-size: 1.5rem;
				font-weight: bold;
				color: white;
		}

		ul.uk-navbar-nav {
				margin-top: 1em;
		}

		div.t-menubar {
				a {
						color: white;

						+ a {
								margin-left: 1rem;
						}
						
						&.mainMenuToggler {
								span.uk-icon {
										margin-right: 0.2em;
								}
						}
				}
		}
		

		// Menu, in navbar or in offcanvas
		#mainMenu {
				ul.uk-nav, ul.uk-navbar-nav {
				}

				&.uk-offcanvas {
						ul.uk-nav {
								li {
										a {
												color: white;
										}
								}
						}
				}
		}
}

// }}}


// =======================================================================
// UI components
// =======================================================================
// {{{

div.VIATocLoginComponent {
		h1 {
				text-align: center;
		}
}

div.VIAModuleFinderComponent {
		margin: 2em 0;

		input[type=text].searchInput {
				display: block;
				font-size: 200%;
				border: 1px solid black;
		}
}


div.VIATocModuleExerciser {

		// Header gets units background color
		.toccamoduleBackgroundColor("h1.moduleNavigation");
		
		h1.moduleNavigation {
				margin: 0;
				color: white;
				text-align: center;
				padding: 0;

				display: flex;
				justify-content: space-between;
				align-items: center;

				span.leftRight {
						width: 15%;
						a {
								color: inherit;
						}
				}
		}

		h2.moduleTitle {
				color: @t-color-blue;
				text-align: center;
				margin-bottom: 1em;
		}

		div.moduleBody {
				margin: 0 0.5em;
		}

		// Accordion top line
		div.accBar {
				.catalogListItem(#333);

				.accTitle {
						display: inline;
						color: @t-color-blue;
				}

				.accToggle {
						float: right;
				}
		}


		div.hiddenTaskExercise {
				// Nicht display:none, weil das Berechnungen der enthaltenen Elemente mit Breite etc. nicht m√∂glich macht
				
				position: absolute !important;
				top: -9999px !important;
				left: -9999px !important;
				width: 100%; // TODO: Smarter, aber ich fand nicht heraus, wo die Breite drin steht. Wir brauchen aber eine feste Breite, damit die Berechnung per JS OK ist
				visibility: hidden;
				
		}


		// Exercise displayer for every task (in a module)
		div.VIATocTaskExerciser {
				padding-left: 0.2em;
				padding-right: 0.2em;

				margin-bottom: 1em;


				// Styles inside the content of tasks
				div.exercise {
						
						@dropTargetHoverColor: yellow;
						
						margin-bottom: 50px;

						div.topToolbar {
								float: right;
						}

						// Titles inside task content, should not be as big as official titles
						h1 {
								font-size: 120%;
						}

						h2 {
								font-size: 110%;
						}

						h3 {
								font-size: 100%;
						}

						table {
								border: 1px solid #999;
								border-collapse: collapse;
								
								td, th {
										border: 1px solid #999;
										padding: 2px 5px;
								}
						}

						
						input[type=text] {
								font: inherit;
								padding: 0 2px;
								margin: -2px 0;
						}

						input[type=text].clozeTextPlaceholder {
								.clozeTextPlaceholder;

								&:focus {
										outline: 1px solid #ccc;
										background-color: #ffd;
								}

								// Intentionally set as empty by user
								&.markedAsEmpty {
										background-color: black;
								}
						}

						
						input, select, textarea {
								// font-family: @base-body-font-family;
						}

						p {
								margin-top: 3px;
								margin-bottom: 3px;
						}


						
						div.selectOneInput, div.selectPointsInput {
								margin-bottom: 10px;

								label:hover {
										background-color: #eee;
								}

								span.wrongIcon {
										// position: absolute;
										// left: -15px;
								}


						}

						select.selectOneInput {
								max-width: 100%;
						}

						div.selectMany {
								label:hover {
										background-color: #eee;
								}

								span.wrongIcon {
										position: absolute;
										left: -15px;
								}

								.bigButton {
										border-color: @t-color-blue;
										color: @t-color-blue;

										&:active, &.active {
												background-color: @t-color-blue;
												color: white;
										}
								}
						}
						
						div.clozeText {
								line-height: 1.8em;

								div.selectOneInput {
										display: inline-block;
								}


								span.dragDropDraggable {
										.draggable();
										
										background-color: #eee;
										padding: 1px 2px;
										border: 1px solid #ccc;

										// margin-bottom: 10px;
										// line-height: normal;
										display: inline-block;

										&:hover {
												border: 1px solid black;
										}

										figure.inlineAssetImage {
												display: inline-block;

												figcaption {
														display: none;
												}
										}
										
								}
								
								span.dragDropTarget {
										display: inline-block;
										min-width: 100px;
										background-color: #eee;
										padding-left: 5px;
										min-height: 1em;
										border-top: none;
										border-left: none;
										border-right: none;
										border-bottom: @borderBottomClozePlaceholders;

										.dropHover();

										// Drag element in a drop container
										span.dragDropDraggable {
												margin-right: 5px;
										}
								}

								div.dragDropDraggables {
										background-color: #eee;
										border: 1px dotted black;
										margin: 10px 0;
										padding: 1px 5px;
										min-height: 20px;

										.dropHover();
										
										span.dragDropDraggable {
												.draggable();
												
												margin-right: 5px;
												// line-height: normal;
												display: inline-block;

												figure.inlineAssetImage {
														display: inline-block;

														figcaption {
																display: none;
														}
														
														// span.assetInfo {
														// 		.uk-text-muted();
														// 		cursor: pointer;
														// 		float: right;
														// }
												}
												
										}
								}

						}

						div.buttons {

								margin-top: 15px;

								// input.submit, button {
								// 		&.check, &.reset, &.recheck, &.revealAnswers, &.save {
								// 				background: #f00;
								// 				color: #fff;
								// 				border:  0px;
								// 				padding: 10px;
								// 				font-size: 1.2em;
								// 				cursor: pointer;
								// 		}
								// }

								
						}


						div.audioPlayer {
								//				width: 50%;
								margin: 10px 0px;
								span.assetInfo {
										float: right;
								}

								
								div.transcriptionContainer {

										div.transcriptionText {
												font-size: 90%;
												line-height: normal;
										}

										
										div.audioTranscription {
												&.disabled {
														.uk-hidden();
												}

												button.printThis {
														float: right;
												}
										}
								}
						}

						
						div.videoPlayer {
								
								div.videoContainer {
										margin-right: 10px;
								}

								div.transcriptionContainer {

										div.videoTranscription {
												&.disabled {
														.uk-hidden();
												}

												button.printThis {
														float: right;
												}
										}

										div.transcriptionText {
												font-size: 90%;
												line-height: normal;
										}
								}

								span.assetInfo {
										float: right;
								}
						}

						div.imageDisplayer {
								span.image {
										display: inline-block;
										text-align: right;
										img {
												display: block;
										}
										span.assetInfo {
										}
										
								}
						}

						span.assetInfo {
								.uk-text-muted();
								cursor: pointer;
						}

						span.hintSymbol {
								margin-left: 3px;
								margin-right: 3px;
						}


						div.mapPairs {
								@pairBorder: 1px solid black;
								
								border-top: @pairBorder;
								display: table;
								border-collapse: collapse;
								
								div.objectPair {
										display: table-row;
										border-bottom: @pairBorder;

										.dropHover();

										span.hintSymbol {
												float:left;
												margin-left: -20px;
												margin-top: 10px;
										}
										
										div.leftObject {
												display: table-cell;
												padding-left: 10px;
										}

										div.middleColumn {
												display: table-cell;
										}

										div.rightObject {
												@dragHandleOffset: 25px;

												display: table-cell;
												padding: 5px 10px 5px (@dragHandleOffset + 10px);

												div.objectPairDraggable {
														background-color: #eee;
														padding: 10px;
														border: 1px solid #ddd;
														margin-bottom: 10px;

														.draggable();

														&:hover {
																border: 1px solid #333;
														}

														&:only-child {
																margin-bottom: 0;
														}

														&:not(:first-child) {
																background-color: #f99;
														}

														span.dragHandle {
																position: absolute;
																margin-left: -@dragHandleOffset;
														}

												}
										}
								}
						}

						// 		div.score {
						// 				margin-top: 30px;
						// 				background-color: white;
						// 		}


						div.objectPairDragHelper {
								padding: 10px;
								border: 1px solid black;
						}

						div.highlightAreas {

								.noUserSelect();
								.noTouch();
								letter-spacing: 0.1em;
								//Nicht, hinterl√§sst weisse verratene L√ºcken beim Markieren		word-spacing: 0.1em;
								padding: 10px;
								margin: 15px 0;
								border: 1px solid #aaa;

								span.highlightArea.solution {
										border: 1px solid #333;
										padding-left: 1px;
								}

								div.pillarParagraph:first-child {
										margin-top: 0;
								}
								
								span.selChar {
										cursor: url('/files/images/horizontal-text-select.cur'), text;
										&.highlighted {
												background-color: green;
												color: white;
												padding-top: 1px;
										}
										&.selected {
												background-color: red;
										}
								}		
						}

						div.taskGroup {
								
								div.taskGroupItem {
										margin: 10px 0px;
								}
						}

						button.taskBrickGroupToggler {
								background-color: #999;

								&:hover {
										background: black;
								}
						}

						div.taskBrickGroup {
								// border: 1px solid black;
								padding: 5px;
						}
						
						
				}


				
				// Tandem sequence
				div.VIATandemSequenceExerciser {
						div.question {
								background-color: @t-color-tandem-question;
								padding: 2em;
								margin-bottom: 2em;

								div.explanation {
										margin-bottom: 2em;
								}
						}

						div.answer {
								margin: 2em 0;
						}

						div.navigation {
								position: sticky;
								bottom: 0;
								background-color: white;
								font-size: 200%;
								display: flex;
								justify-content: space-between;
								align-items: center;

								a {
										color: inherit;
								}

								// span.leftRight {
								// 		width: 15%;
								// 		a {
								// 				color: inherit;
								// 		}
								// }

								
						}
						
				}
		}
}

div.VIAUnitComponent {
		ul.modulesList {
				list-style-type: none;
				
				li {
						.catalogListItem(#333);
				}
		}
}

// }}}




// ============================================
// Misc
// ============================================

// TODO: Oben einsortieren!

figure.inlineAssetImage {
		display: inline-block;

		figcaption {
				display: none;
		}
}

.correct {
		background-color: #cfc;
}

.wrong {
		background-color: @wrongColor;
}

span.partiallyCorrectIcon {
		color: orange;
}

span.correctIcon {
		color: #1a1;
}

span.wrongIcon {
		color: #666;
		padding-left: 4px;
		padding-right: 2px;
}

div.webui-popover {
		span.markAsEmpty {
				cursor: pointer;
				border: 2px solid green;

				&.active {
						background-color: green;
				}
		}
}

// div.VIAExerciserSolutionComponent,
// div.VIAExerciserFinishedComponent {
// 		.solution {
// 				// background-color: lightyellow;

// 				&.answerWasWrong {
// 						// background-color: @wrongColor;
// 				}

// 				&.answerWasCorrect {
// 						background-color: @correctColor;
// 				}
// 		}
// }

// // div.VIAExerciserFinishedComponent {
// // 		.solution {

// // 				&.answerWasWrong {
// // 						// background-color: transparent;
// // 				}

// // 		}
// // }


span.copyPaste, pre.copyPaste {
		cursor: pointer;
}




// // TODO Evt. innerhalb taskEditor
// div.inputEditor {
// 		> div.inputEditor {
// 				border: 1px solid #333;
// 				background-color: #f3f3f3;
// 				padding: 5px;
// 				margin: 10px 0;
// 		}
// }

span.dictionaryEntry {
		border-bottom: 1px dotted #333;
}


.finished {
		background-color: #999;
}

.inWork {
		background-color: #999;
}

// div.moduleScore {
// //		float: right;
// //		margin-bottom: 5px;

// 		table.scoreTable {
// 				border-collapse: collapse;

// 				td {
// 						border: 1px solid black;

// 						&.ignored {
// 								background-color: #999;
// 								color: #666;
// 						}

// 						span.taskNumber {
// 								font-size: 14px;
// 								margin: 0 5px;
// 								font-weight: bold;
// 						}

// 				}

// 		}
// }


div.moduleBody {
		clear: both;
		position: relative; // Wichtig, damit eingebettete versteckte absolute-Elemente die Breite korrekt berechnen k√∂nnen
}

// }}}

// Keep this for Emacs editor!
// Local Variables:
// less-css-compile-at-save: t
// origami-fold-style: triple-braces
// End:
